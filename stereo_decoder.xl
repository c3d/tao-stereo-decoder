// ****************************************************************************
//  stereo_decoder.xl                                              Tao project 
// ****************************************************************************
// 
//   File Description:
// 
//     This module makes it easy to decode common stereoscopic formats
// 
// 
// 
// 
// ****************************************************************************
//  This document is property of Taodyne SAS
//  (C) 2011-2013 Taodyne SAS
// ****************************************************************************

module_description
    id "7f1f04f0-1f3d-11e1-8382-022d9abde600"
    name "Stereoscopic decoder"
    import_name "StereoDecoder"
    description "A module that allows to decode some stereoscopic formats " &
                "and to display different things depending on the current " &
                "viewpoint (such as: left or right eye)."
    author "Taodyne SAS"
    website "http://www.taodyne.com"
    version 1.022

module_description "fr",
    name "Décodeur stéréoscopique"
    description "Permet de decoder plusieurs types de formats et d'afficher " &
                "des choses différentes selon le point de vue (par exemple, " &
                "œil gauche ou droit)."



// ============================================================================
// 
//    Utilities to isolate left and right viewpoints
// 
// ============================================================================

left_viewpoint X                -> stereo_viewpoints 2#0101010101010101, X
right_viewpoint X               -> stereo_viewpoints 2#1010101010101010, X



// ============================================================================
// 
//    Stereoscopic modes
// 
// ============================================================================

decode_stereo_eye "LEFT", "HSPLIT" ->
    texture_transform
        scalex 0.5
decode_stereo_eye "RIGHT", "HSPLIT" ->
    texture_transform
        translatex 0.5
        scalex 0.5

decode_stereo_eye "RIGHT", "RHSPLIT" ->
    texture_transform
        scalex 0.5
decode_stereo_eye "LEFT", "RHSPLIT" ->
    texture_transform
        translatex 0.5
        scalex 0.5

decode_stereo_eye "LEFT", "VSPLIT" ->
    texture_transform
        scaley 0.5
decode_stereo_eye "RIGHT", "VSPLIT" ->
    texture_transform
        translatey 0.5
        scaley 0.5

decode_stereo_eye "RIGHT", "RVSPLIT" ->
    texture_transform
        scaley 0.5
decode_stereo_eye "LEFT", "RVSPLIT" ->
    texture_transform
        translatey 0.5
        scaley 0.5

decode_horizontal_split         -> decode_stereo "HSPLIT"
decode_vertical_split           -> decode_stereo "VSPLIT"
decode_horizontal_split_reverse -> decode_stereo "RHSPLIT"
decode_vertical_split_reverse   -> decode_stereo "RVSPLIT"



// ============================================================================
// 
//    Multiscopic 5-view mode
// 
// ============================================================================

decode_5view_eye 0, W:integer, H:integer ->
    texture_transform
        translate 0.0, 0.6, 0.0
        scale 0.5, 0.4, 1.0
    rectangle 1.25 * W, H

decode_5view_eye 1, W:integer, H:integer ->
    texture_transform
        translate 0.5, 0.6, 0.0
        scale 0.5, 0.4, 1.0
    rectangle 1.25 * W, H

decode_5view_eye 2, W:integer, H:integer ->
    texture_transform
        translate 0.0, 0.2, 0.0
        scale 0.5, 0.4, 1.0
    rectangle 1.25 * W, H

decode_5view_eye 3, W:integer, H:integer ->
    texture_transform
        translate 0.5, 0.2, 0.0
        scale 0.5, 0.4, 1.0
    rectangle 1.25 * W, H

decode_5view_eye 4, W:integer, H:integer ->
    locally
        texture_transform
            translate 0.5, 0.0, 0.0
            scale 0.5, 0.2, 1.0
        rectangle 0, -0.25*H+0.5, 1.25 * W, 0.5*H
    locally
        texture_transform
            translate 0.0, 0.0, 0.0
            scale 0.5, 0.2, 1.0
        rectangle 0, 0.25*H, 1.25 *  W, 0.5*H

decode_stereo "5VIEW", W:integer, H:integer -> 
    stereo_viewpoints 1,
        decode_5view_eye 0, W, H
    stereo_viewpoints 2,
        decode_5view_eye 1, W, H
    stereo_viewpoints 4,
        decode_5view_eye 2, W, H
    stereo_viewpoints 8,
        decode_5view_eye 3, W, H
    stereo_viewpoints 16,
        decode_5view_eye 4, W, H

    stereo_viewpoints 32,
        decode_5view_eye 0, W, H
    stereo_viewpoints 64,
        decode_5view_eye 1, W, H
    stereo_viewpoints 128,
        decode_5view_eye 2, W, H
    stereo_viewpoints 256,
        decode_5view_eye 3, W, H
    stereo_viewpoints 512,
        decode_5view_eye 4, W, H

    stereo_viewpoints 1024,
        decode_5view_eye 0, W, H
    stereo_viewpoints 2048,
        decode_5view_eye 1, W, H
    stereo_viewpoints 4096,
        decode_5view_eye 2, W, H
    stereo_viewpoints 8192,
        decode_5view_eye 3, W, H
    stereo_viewpoints 16384,
        decode_5view_eye 4, W, H

decode_5view -> decode_stereo "5VIEW", texture_width, texture_height



// ============================================================================
// 
//    Multiscopic 5-view mode, taking only 4 views
// 
// ============================================================================

decode_stereo "5VIEW4", W:integer, H:integer -> 
    stereo_viewpoints 1,
        decode_5view_eye 0, W, H
    stereo_viewpoints 2,
        decode_5view_eye 1, W, H
    stereo_viewpoints 4,
        decode_5view_eye 2, W, H
    stereo_viewpoints 8,
        decode_5view_eye 3, W, H

    stereo_viewpoints 16,
        decode_5view_eye 0, W, H
    stereo_viewpoints 32,
        decode_5view_eye 1, W, H
    stereo_viewpoints 64,
        decode_5view_eye 2, W, H
    stereo_viewpoints 128,
        decode_5view_eye 3, W, H

    stereo_viewpoints 256,
        decode_5view_eye 0, W, H
    stereo_viewpoints 512,
        decode_5view_eye 1, W, H
    stereo_viewpoints 1024,
        decode_5view_eye 2, W, H
    stereo_viewpoints 2048,
        decode_5view_eye 3, W, H

    stereo_viewpoints 4096,
        decode_5view_eye 0, W, H
    stereo_viewpoints 8192,
        decode_5view_eye 1, W, H
    stereo_viewpoints 16384,
        decode_5view_eye 2, W, H
    stereo_viewpoints 32768,
        decode_5view_eye 3, W, H

decode_5view4 -> decode_stereo "5VIEW4", texture_width, texture_height



// ============================================================================
// 
//    Multiscopic 8-view mode
// 
// ============================================================================

decode_8view_eye 5, W:integer, H:integer ->
    texture_transform
        translate 0.0, 5.0/8, 0.0
        scale 1.0/3, 1.0 * 3/8, 1.0
    rectangle W, H * 9/8

decode_8view_eye 4, W:integer, H:integer ->
    texture_transform
        translate 1.0/3, 5.0/8, 0.0
        scale 1.0/3, 1.0 * 3/8, 1.0
    rectangle W, H * 9/8

decode_8view_eye 3, W:integer, H:integer ->
    texture_transform
        translate 2.0/3, 5.0/8, 0.0
        scale 1.0/3, 1.0 * 3/8, 1.0
    rectangle W, H * 9/8

decode_8view_eye 2, W:integer, H:integer ->
    texture_transform
        translate 0.0, 2.0/8, 0.0
        scale 1.0/3, 1.0 * 3/8, 1.0
    rectangle W, H * 9/8

decode_8view_eye 1, W:integer, H:integer ->
    texture_transform
        translate 1.0/3, 2.0/8, 0.0
        scale 1.0/3, 1.0 * 3/8, 1.0
    rectangle W, H * 9/8

decode_8view_eye 0, W:integer, H:integer ->
    texture_transform
        translate 2.0/3, 2.0/8, 0.0
        scale 1.0/3, 1.0 * 3/8, 1.0
    rectangle W, H * 9/8

decode_8view_eye 7, W:integer, H:integer ->
    locally
        texture_transform
            translate 1.0/3, 1.0/8, 0.0
            scale 1.0/3, 1.0/8, 1.0
        rectangle 0, H*3/8-0.5, W, H*3/8
    locally
        texture_transform
            scale 1.0/3, 1.0/4, 1.0
        rectangle 0, -H*3/16+0.5, W, H*3/4

decode_8view_eye 6, W:integer, H:integer ->
    locally
        texture_transform
            translate 1.0/3, 0.0, 0.0
            scale 1.0/3, 1.0/8, 1.0
        rectangle 0, -H*3/8+0.5, W, H*3/8
    locally
        texture_transform
            translate 2.0/3, 0.0, 0.0
            scale 1.0/3, 1.0/4, 1.0
        rectangle 0, H*3/16-0.5, W, H * 3/4

decode_stereo "8VIEW", W:integer, H:integer ->
    stereo_viewpoints 1,
        decode_8view_eye 0, W, H
    stereo_viewpoints 2,
        decode_8view_eye 1, W, H
    stereo_viewpoints 4,
        decode_8view_eye 2, W, H
    stereo_viewpoints 8,
        decode_8view_eye 3, W, H
    stereo_viewpoints 16,
        decode_8view_eye 4, W, H
    stereo_viewpoints 32,
        decode_8view_eye 5, W, H
    stereo_viewpoints 64,
        decode_8view_eye 6, W, H
    stereo_viewpoints 128,
        decode_8view_eye 7, W, H

    stereo_viewpoints 256,
        decode_8view_eye 0, W, H
    stereo_viewpoints 512,
        decode_8view_eye 1, W, H
    stereo_viewpoints 1024,
        decode_8view_eye 2, W, H
    stereo_viewpoints 2048,
        decode_8view_eye 3, W, H
    stereo_viewpoints 4096,
        decode_8view_eye 4, W, H
    stereo_viewpoints 8192,
        decode_8view_eye 5, W, H
    stereo_viewpoints 16384,
        decode_8view_eye 6, W, H
    stereo_viewpoints 32768,
        decode_8view_eye 7, W, H

decode_8view -> decode_stereo "8VIEW"


decode_stereo "8VIEW6", W:integer, H:integer ->
    stereo_viewpoints 1,
        decode_8view_eye 0, W, H
    stereo_viewpoints 2,
        decode_8view_eye 0, W, H
    stereo_viewpoints 4,
        decode_8view_eye 1, W, H
    stereo_viewpoints 8,
        decode_8view_eye 2, W, H
    stereo_viewpoints 16,
        decode_8view_eye 3, W, H
    stereo_viewpoints 32,
        decode_8view_eye 4, W, H
    stereo_viewpoints 64,
        decode_8view_eye 5, W, H
    stereo_viewpoints 128,
        decode_8view_eye 5, W, H

    stereo_viewpoints 256,
        decode_8view_eye 0, W, H
    stereo_viewpoints 512,
        decode_8view_eye 0, W, H
    stereo_viewpoints 1024,
        decode_8view_eye 1, W, H
    stereo_viewpoints 2048,
        decode_8view_eye 2, W, H
    stereo_viewpoints 4096,
        decode_8view_eye 3, W, H
    stereo_viewpoints 8192,
        decode_8view_eye 4, W, H
    stereo_viewpoints 16384,
        decode_8view_eye 5, W, H
    stereo_viewpoints 32768,
        decode_8view_eye 5, W, H

decode_8view6 -> decode_stereo "8VIEW6"



// ============================================================================
// 
//    Multiscopic 9-view mode
// 
// ============================================================================

decode_9view_eye N:integer, W:integer, H:integer ->
    texture_transform
        translate (8-N) mod 3 * 1.0 / 3, (8-N)/3 * 1.0/3, 0.0
        scale 1.0/3, 1.0/3, 1.0
    rectangle W, H


decode_stereo "9VIEW", W:integer, H:integer ->
    stereo_viewpoints 1,
        decode_9view_eye 0, W, H
    stereo_viewpoints 2,
        decode_9view_eye 1, W, H
    stereo_viewpoints 4,
        decode_9view_eye 2, W, H
    stereo_viewpoints 8,
        decode_9view_eye 3, W, H
    stereo_viewpoints 16,
        decode_9view_eye 4, W, H
    stereo_viewpoints 32,
        decode_9view_eye 5, W, H
    stereo_viewpoints 64,
        decode_9view_eye 6, W, H
    stereo_viewpoints 128,
        decode_9view_eye 7, W, H
    stereo_viewpoints 256,
        decode_9view_eye 8, W, H

    stereo_viewpoints 512,
        decode_9view_eye 0, W, H
    stereo_viewpoints 1024,
        decode_9view_eye 1, W, H
    stereo_viewpoints 2048,
        decode_9view_eye 2, W, H
    stereo_viewpoints 4096,
        decode_9view_eye 3, W, H
    stereo_viewpoints 8192,
        decode_9view_eye 4, W, H
    stereo_viewpoints 16384,
        decode_9view_eye 5, W, H
    stereo_viewpoints 32768,
        decode_9view_eye 6, W, H

decode_9view -> decode_stereo "9VIEW"



// ============================================================================
// 
//    Multiscopic 5 of 9 view mode
// 
// ============================================================================

decode_stereo "5OF9VIEW", W:integer, H:integer ->
    stereo_viewpoints 1,
        decode_9view_eye 0, W, H
    stereo_viewpoints 2,
        decode_9view_eye 1, W, H
    stereo_viewpoints 4,
        decode_9view_eye 2, W, H
    stereo_viewpoints 8,
        decode_9view_eye 3, W, H
    stereo_viewpoints 16,
        decode_9view_eye 4, W, H
    stereo_viewpoints 32,
        decode_9view_eye 0, W, H
    stereo_viewpoints 64,
        decode_9view_eye 1, W, H
    stereo_viewpoints 128,
        decode_9view_eye 2, W, H
    stereo_viewpoints 256,
        decode_9view_eye 3, W, H
    stereo_viewpoints 512,
        decode_9view_eye 4, W, H
    stereo_viewpoints 1024,
        decode_9view_eye 0, W, H
    stereo_viewpoints 2048,
        decode_9view_eye 1, W, H
    stereo_viewpoints 4096,
        decode_9view_eye 2, W, H
    stereo_viewpoints 8192,
        decode_9view_eye 3, W, H
    stereo_viewpoints 16384,
        decode_9view_eye 4, W, H
    stereo_viewpoints 32768,
        decode_9view_eye 0, W, H

decode_5of9view -> decode_stereo "5OF9VIEW"



// ============================================================================
// 
//    2D+Z to multi-view conversion
// 
// ============================================================================

decode_2dplusz_view_delta  -> 0.008
decode_2dplusz_view_offset -> 0.008

decode_stereo "2D+Z", W:integer, H:integer ->
// ----------------------------------------------------------------------------
//    Decode a 2D+Z movie using a displacement map
// ----------------------------------------------------------------------------
    locally
        shader_program
            vertex_shader <<
                void main(void)
                {
                    gl_TexCoord[0] = gl_MultiTexCoord0;
                    gl_Position = ftransform();
                }
            >>
            fragment_shader <<
                uniform float Zscale, Zoffset;
                uniform sampler2D tex;

                void main(void)
                {
                    vec2 texCoord = gl_TexCoord[0].st;
                    float texX = texCoord.x * 0.5;
                    float texY = texCoord.y;
                    vec2 colorCoord = vec2(texX, texY);
                    vec2 depthCoord = vec2(texX + 0.5, texY);
                    float depth = texture2D(tex, depthCoord).g;
                    depth = mix(Zoffset, depth, smoothstep(0.0, 0.1, texX));
                    texX = clamp(texX + (depth - Zoffset) * Zscale, 0.001, 0.499);
                    colorCoord.x = texX;
                    vec4 color = texture2D(tex, colorCoord);
                    gl_FragColor = color;
                }
            >>

        shader_set Zoffset := 0.5
        for I in 0..stereo_viewpoints-1 loop
            decode_2dplusz_stereo_viewpoint I, W, H
        decode_2dplusz_stereo_viewpoint N:integer, W:integer, H:integer -> 
            stereo_viewpoints 2^N,
                decode_2dplusz_view_offset := (N - stereo_viewpoints/2) * decode_2dplusz_view_delta
                shader_set Zscale := decode_2dplusz_view_offset
                rectangle W, 2*H

decode_2dplusz  -> decode_stereo "2D+Z", texture_width, texture_height



// ============================================================================
// 
//    Declipse to multi-view conversion
// 
// ============================================================================

decode_stereo "Declipse", W:integer, H:integer ->
// ----------------------------------------------------------------------------
//    Decode a 2D+Z movie using a displacement map
// ----------------------------------------------------------------------------
    locally
        shader_program
            vertex_shader <<
                void main(void)
                {
                    gl_TexCoord[0] = gl_MultiTexCoord0;
                    gl_Position = ftransform();
                }
            >>
            fragment_shader <<
                uniform float Zscale, Zoffset;
                uniform sampler2D tex;

                void main(void)
                {
                    vec2 texCoord = gl_TexCoord[0].st;
                    float texX = texCoord.x * 0.5;
                    float texY = texCoord.y * 0.5 + 0.5;
                    vec2 colorCoord = vec2(texX, texY);
                    vec2 depthCoord = vec2(texX + 0.5, texY);
                    float depth = texture2D(tex, depthCoord).g;
                    depth = mix(Zoffset, depth, smoothstep(0.0, 0.1, texX));
                    texX = clamp(texX + (depth - Zoffset) * Zscale, 0.001, 0.499);
                    colorCoord.x = texX;
                    vec4 color = texture2D(tex, colorCoord);

                    vec2 depthCoord2 = vec2(texX+0.5, texY-0.5);
                    float depth2 = texture2D(tex, depthCoord2).g;
                    if (depth2 < Zoffset && depth <= Zoffset)
                    {
                        colorCoord.y = texY - 0.5;
                        vec4 backColor = texture2D(tex, colorCoord);
                        color = mix(backColor, color, depth); 
                    }
                    gl_FragColor = color;
                }
            >>

        shader_set Zoffset := 0.5
        for I in 0..stereo_viewpoints-1 loop
            decode_2dplusz_stereo_viewpoint I, W, H
        decode_2dplusz_stereo_viewpoint N:integer, W:integer, H:integer -> 
            stereo_viewpoints 2^N,
                decode_2dplusz_view_offset := (N - stereo_viewpoints/2) * decode_2dplusz_view_delta
                shader_set Zscale := decode_2dplusz_view_offset
                rectangle W, 2*H

decode_declipse -> decode_stereo "Declipse", texture_width, texture_height



// ============================================================================
// 
//    General case, catch-all for the stereoscopic mode
// 
// ============================================================================

decode_stereo Mode:text ->
    decode_stereo Mode, texture_width, texture_height

decode_stereo Mode:text, W:integer, H:integer ->
    decode_stereo_int viewpoints, Mode, W, H

    decode_stereo_int 1, Mode:text, W:integer, H:integer ->
        writeln "Mode=", Mode
        decode_stereo_eye "LEFT", Mode
        rectangle W, H
        
    decode_stereo_int Count:integer, Mode:text, W:integer, H:integer ->
        sigmoid X:real -> 1/(1+exp(-5*(2*X-1)))
        for V in 0..Count-1 loop
            decode_stereo_at V, sigmoid(real V / (Count-1)), Mode, W, H

    decode_stereo_at View:integer, Ratio:real, Mode:text, W:integer, H:integer->
        stereo_viewpoints 2^View,
            
            locally
                decode_stereo_eye "LEFT", Mode
                show Ratio
                rectangle W, H
            locally
                decode_stereo_eye "RIGHT", Mode
                show 1-Ratio
                rectangle W, H
            locally
                texture ""
                color "red"
                triangle W*(Ratio-0.5), -H*0.5, 100, 100
                


// ============================================================================
// 
//    Multi-stream decoding
// 
// ============================================================================

multistream_movie Movie:text, LeftIndex:integer, Increment:integer ->
// ----------------------------------------------------------------------------
//    Decode the N streams in the given movie
// ----------------------------------------------------------------------------
    for V in 0..stereo_viewpoints-1 loop
        multistream_movie_view Movie, V, LeftIndex + V*Increment


multistream_movie_view Movie:text, View:integer, Index:integer ->
// ----------------------------------------------------------------------------
//   Decode a given view in a multistream movie
// ----------------------------------------------------------------------------
    stereo_viewpoints 2^View,
        movie_set_video_stream Movie, Index
        movie_texture Movie
        rectangle texture_width, texture_height


multiview_image Picture:text, LeftIndex:integer, Increment:integer ->
// ----------------------------------------------------------------------------
//    Show a multiview picture
// ----------------------------------------------------------------------------
    for V in 0..stereo_viewpoints-1 loop
        multiview_image_view Picture, V, LeftIndex + V*Increment


multiview_image_view Picture:text, View:integer, Index:integer ->
// ----------------------------------------------------------------------------
//    Show a view in a picture
// ----------------------------------------------------------------------------
    stereo_viewpoints 2^View,
         image 0, 0, 1, 1, text_replace(Picture, "#", text Index)
